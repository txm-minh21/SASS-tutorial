import*as e from"glob";import r from"plugin-error";import{PurgeCSS as t}from"purgecss";import o from"through2";import n from"vinyl-sourcemaps-apply";const s="gulp-purgecss";function c(c){return o.obj((async function(i,a,u){if(i.isNull())return u(null,i);if(i.isBuffer())try{const r={...c,content:(p=c.content,f=c.skippedContentGlobs,p.reduce(((r,t)=>[...r,...e.sync(t,{ignore:f})]),[])),css:[{raw:i.contents.toString()}],stdin:!0,sourceMap:!!i.sourceMap},o=(await(new t).purge(r))[0],s=r.rejected&&o.rejected?o.rejected.join(" {}\n")+" {}":o.css;i.contents=Buffer.from(s,"utf-8"),i.sourceMap&&n(i,o.sourceMap),u(null,i)}catch(e){e instanceof Error&&this.emit("error",new r(s,e.message))}var p,f;if(i.isStream()){let e="";i.contents.on("data",(r=>{e+=r.toString()})).on("end",(async()=>{try{const r={...c,css:[{raw:e}],sourceMap:!!i.sourceMap},s=(await(new t).purge(r))[0],a=r.rejected&&s.rejected?s.rejected.join(" {}\n")+" {}":s.css,p=o();p.write(Buffer.from(a,"utf-8")),i.contents=i.contents.pipe(p),i.sourceMap&&n(i,s.sourceMap),u(null,i)}catch(e){e instanceof Error&&this.emit("error",new r(s,e.message))}}))}}))}export{c as default};
